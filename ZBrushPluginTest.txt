// ZBrush Plugin test
[VarDef,dllPath,""]//path to dll
[VarDef,err,0]//standard error
[VarDef,ver,0]//version
[VarDef,stringArg,""]
[VarDef,responseString,""]

[RoutineDef,CheckSystem,
	[VarSet,dllPath,"ZBrushPluginDLL.DLL"]
	[If,[FileExists,dllPath],
		,
		[Note,"DLL is missing"][Exit]
	]
]

[RoutineDef,SaveCanvas,
	[RoutineCall,CheckSystem]

	[VarSet, width, (Document:Width)]
	[VarSet, height, (Document:Height)]

	[VarSet, surface, [FileExecute,[Var,dllPath],"CreateSurface", [StrMerge,width,",",height]]]

	// allocate buffer
	[MemCreate, canvasBuffer, width * height * 4]

	// color
	[loop, height, 
	  [loop, width,
		[MemWrite, canvasBuffer, [PixolPick, 0, x, y], 6, (y * width + x) * 4]
	  ,x]
	,y]
	[FileExecute,[Var,dllPath],"SetChannel", "RGB",surface,canvasBuffer]

	// depth
	[MemCreate, canvasBuffer, width * height * 2]
	[loop, height, 
	  [loop, width,
		[MemWrite, canvasBuffer, [PixolPick, 1, x, y], 4, (y * width + x) * 2]
	  ,x]
	,y]
	[FileExecute,[Var,dllPath],"SetChannel", "D",surface,canvasBuffer]

	// material
	[loop, height, 
	  [loop, width,
		[MemWrite, canvasBuffer, [PixolPick, 5, x, y], 2, (y * width + x)]
	  ,x]
	,y]
	[FileExecute,[Var,dllPath],"SetChannel", "M",surface,canvasBuffer]

	// normal x
	[loop, height, 
	  [loop, width,
		[MemWrite, canvasBuffer, [PixolPick, 6, x, y], 0, (y * width + x) * 4]
	  ,x]
	,y]
	[FileExecute,[Var,dllPath],"SetChannel", "NX",surface,canvasBuffer]

	// normal y
	[loop, height, 
	  [loop, width,
		[MemWrite, canvasBuffer, [PixolPick, 7, x, y], 0, (y * width + x) * 4]
	  ,x]
	,y]
	[FileExecute,[Var,dllPath],"SetChannel", "NY",surface,canvasBuffer]

	// normal z
	[loop, height, 
	  [loop, width,
		[MemWrite, canvasBuffer, [PixolPick, 8, x, y], 0, (y * width + x) * 4]
	  ,x]
	,y]
	[FileExecute,[Var,dllPath],"SetChannel", "NZ",surface,canvasBuffer]

	[FileExecute,[Var,dllPath],"WriteSurface", path, surface]

	[FileExecute,[Var,dllPath], "DestroySurface",,surface]

	// free memory
	[MemDelete, canvasBuffer]
, path]

[RoutineDef, LoadCanvas,
, path]

[RoutineCall,CheckSystem]
[FileExecute,[Var,dllPath],"Initialise"]

/*
[IButton,"Test Version","Test DLL Version function",
	[RoutineCall,CheckSystem]
	[VarSet,ver,[FileExecute,[Var,dllPath],"Version"]]
	[Note,[StrMerge,"This DLL is version ",ver]]
]

[IButton,"Test HelloDLL","Test DLL HelloDLL function",
	[RoutineCall,CheckSystem]
	[VarSet,stringArg,"Hello from ZBrush"]
	//create buffer for response string
	//this buffer can also pass a string to the dll (such as a second file path)
	[MemCreate,Test_DLL_mem, 256, 0]	
	[VarSet,err,[FileExecute,[Var,dllPath],"HelloDLL",#stringArg,,Test_DLL_mem]]
	[If,err,
		[Note,"An error has occured"]
		[Exit]
		,
		[MemReadString,Test_DLL_mem,#responseString]
		[Note,responseString]//should say 'Hello from my DLL'
		[MemDelete,Test_DLL_mem]//done with buffer, delete it
	]
]

[IButton, "Test Save", "Test Save function",
	[RoutineCall,CheckSystem]
	[FileExecute,[Var,dllPath],"Initialise"]
	[VarSet,path,[FileNameAsk, "EXR(*.exr)|*.exr", "canvas" , "Please select a file to save..."]]
	[if,[StrLength,path] > 0,
		[RoutineCall, SaveCanvas, path]
	]
]
*/

[ISubPalette,"Document:ZBrush Plugin Test"]
[IButton,"Document:ZBrush Plugin Test:Canvas Export","Canvas Export",
	[VarSet,path,[FileNameAsk, "EXR(*.exr)|*.exr", "canvas" , "Please select a file to save..."]]
	[if,[StrLength,path] > 0,
		[RoutineCall, SaveCanvas, path]
	]
]
